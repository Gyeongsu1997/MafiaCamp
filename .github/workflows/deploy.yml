name: Back-end Deployment

on:
  push:
    branches: [ "BE_develop" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # 실행할 환경 설정
    steps:
      # 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # Node.js 환경 설정
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'  # NestJS에 맞는 Node.js 버전 설정

      # 의존성 설치
      - name: Install dependencies
        run: npm install --prefix BE

      # 코드 린트 검사
      - name: Run Linter
        run: npm run lint --prefix BE

      # 타입스크립트 컴파일 검사
      - name: TypeScript Compile Check
        run: npm run build:check --prefix BE

      # 테스트 실행 및 커버리지 확인
      #      - name: Run Tests and Check Coverage
      #        run: npm run test:cov --prefix BE

      # 애플리케이션 빌드
      - name: Build project
        run: npm run build --prefix BE

      # Docker의 고급 빌드 기능을 사용하기 위한 설정 멀티 아키텍처 플랫폼을(예: amd64, arm64) 지원
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Ncp Container Registry 접속
      - name: Login to NCP Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.NCP_CONTAINER_REGISTRY }}
          username: ${{ secrets.NCP_ACCESS_KEY }}
          password: ${{ secrets.NCP_SECRET_KEY }}

      # 도커 이미지 빌드하여 ncp container registry에 등록
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./BE
          file: ./BE/Dockerfile
          push: true
          tags: ${{ secrets.NCP_CONTAINER_REGISTRY }}
          cache-from: type=registry,ref=${{ secrets.NCP_CONTAINER_REGISTRY }}/mafiacamp-be:latest
          cache-to: type=inline

      # ssh 원격 접속을 통해 도커 컴포즈로 도커 컨테이너 실행하기
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          proxy_host: ${{ secrets.PROXY_HOST }}
          proxy_username: ${{ secrets.PROXY_USERNAME }}
          proxy_password: ${{ secrets.PROXY_PASSWORD }}
          proxy_port: ${{ secrets.PROXY_PORT }}
          script: |
            cd mafiacamp/mafiacamp-be/BE
            docker-compose pull
            docker-compose down
            docker-compose up -d
            docker image prune -f